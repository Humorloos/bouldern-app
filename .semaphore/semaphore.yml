version: v1.0
name: Python Anywhere Pipeline
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804
auto_cancel:
  running:
    when: branch != 'master'
global_job_config:
  # Connect secret to all jobs in the pipeline
  secrets:
    - name: env
  env_vars:
    - name: PROJECT_DIR
      value: /home/semaphore/bouldern-app
  prologue:
    commands:
      - checkout
      - FRONTEND_DIR="$PROJECT_DIR"/frontend
      - CACHE_SUFFIX=$SEMAPHORE_GIT_BRANCH-$(checksum frontend/package-lock.json)-$(checksum .semaphore/semaphore.yml)
      - NPM_KEY=npm-$CACHE_SUFFIX
      - CYPRESS_KEY=cypress-$CACHE_SUFFIX
blocks:
  - name: Install Frontend Dependencies
    dependencies: []
    task:
      prologue:
        commands:
          - nvm use
      jobs:
        - name: npm install and cache
          priority:
          - value: 4
            when: "true"
          commands:
            - cd frontend
            - cache restore $NPM_KEY
            - cache restore $CYPRESS_KEY
            - npm ci
            # Cache NPM dependencies and Cypress binary
            - cache store $NPM_KEY ~/.npm
            - cache store $CYPRESS_KEY ~/.cache/Cypress
#  - name: Install Backend Dependencies
#    dependencies: []
#    task:
#      secrets:
#        - name: private-repo
#      jobs:
#        - name: pip
#          priority:
#          - value: 4
#            when: "true"
#          commands:
#            # Restore dependencies from cache. This command will not fail in
#            # case of a cache miss. In case of a cache hit, pip can use it
#            # to speed up the installation.
#            # For more info on caching, see https://docs.semaphoreci.com/article/149-caching
#            - cache restore
#            # Install other python dependencies.
#            # If not found in the cache, pip will download them.
#            - sem-version python 3.9
#            - pip download --cache-dir .pip_cache -r requirements.txt
#            # Persist downloaded packages for future jobs.
#            - cache store
#        - name: private repositories
#          priority:
#          - value: 4
#            when: "true"
#          commands:
#            # Clone private repositories and cache them if not already cached
#            - . .semaphore/private_repos.sh
#        - name: gdal and spatialite
#          priority:
#          - value: 4
#            when: "true"
#          commands:
#            # Install gdal and spatialite and cache whole /usr directory
#            - . .semaphore/install_gdal_and_spatialite.sh
  - name: Run Frontend Tests
    dependencies:
      - Install Frontend Dependencies
    task:
      prologue:
        commands_file: frontend_prologue.sh
      # This block executes code analysis with ESLint
      jobs:
#        - name: ESLint
#          priority:
#          - value: 1
#            when: "true"
#          commands:
#            - npx eslint .
        - name: Build for android
          priority:
          - value: 1
            when: "true"
          commands:
            - npx vite build
            - npx cap copy
#  - name: Run Backend Tests
#      # This block executes code analysis with pylint and backend integration
#      # tests.
#    dependencies:
#      - Install Backend Dependencies
#    task:
#      prologue:
#        commands_file: backend_prologue.sh
#      jobs:
#        - name: Pylint
#          priority:
#          - value: 2
#            when: "true"
#          commands:
#            - pylint python_anywhere --load-plugins=pylint_django
#        - name: Integration tests
#          priority:
#          - value: 3
#            when: "true"
#          commands:
#            - pytest
#  - name: Run E2E Tests
#      # This block executes code analysis with pylint and backend integration
#      # tests.
#    dependencies:
#      - Install Frontend Dependencies
#      - Install Backend Dependencies
#    task:
#      secrets:
#        - name: private-repo
#      prologue:
#        commands_file: e2e_prologue.sh
#      jobs:
#        - name: E2E Tests
#          priority:
#          - value: 4
#            when: "true"
#          commands:
#            - python manage.py runsslserver &
#            - cd frontend || exit
#            - VUE_LOGFILE=vue_server.log
#            - SEARCH_PATTERN='ready'
#            - npx vite > ${VUE_LOGFILE} &
#            - tail -f -n0 ${VUE_LOGFILE} | grep -qe "${SEARCH_PATTERN}"
#            - npm run report
#      epilogue:
#        always:
#          commands:
#            - artifact push job "$PROJECT_DIR"/django_server.log
#            - artifact push job "$FRONTEND_DIR"/vue_server.log
#            - artifact push job "$FRONTEND_DIR"/cypress/videos
#            - artifact push job "$FRONTEND_DIR"/cypress/screenshots
#            - artifact push job "$FRONTEND_DIR"/cypress/logs
#            - test-results publish cypress/results/report.xml
after_pipeline:
  task:
    jobs:
      - name: Publish Results
        commands:
          - test-results gen-pipeline-report

promotions:
  - name: Deploy
    pipeline_file: deploy.yml
    auto_promote:
      when: branch = 'master' AND result = 'passed'
