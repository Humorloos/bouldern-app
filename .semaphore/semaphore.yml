version: v1.0
name: Python Anywhere Pipeline
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

global_job_config:
  # Connect secret to all jobs in the pipeline
  secrets:
    - name: env

auto_cancel:
  running:
    when: "branch != 'master'"

blocks:
  - name: "Install Dependencies"
    dependencies: []
    task:
      jobs:
        - name: pip
          commands:
            # Get the latest version of our source code from GitHub:
            # See https://docs.semaphoreci.com/article/54-toolbox-reference#checkout
            - checkout
            # Restore dependencies from cache. This command will not fail in
            # case of a cache miss. In case of a cache hit, pip can use it
            # to speed up the installation.
            # For more info on caching, see https://docs.semaphoreci.com/article/149-caching
            - cache restore
            # Install other python dependencies.
            # If not found in the cache, pip will download them.
            - sem-version python 3.9
            - pip download --cache-dir .pip_cache -r requirements.txt
            # Persist downloaded packages for future jobs.
            - cache store
  - name: "Run Code Analysis"
    dependencies: ["Install Dependencies"]
    task:
      secrets:
        - name: private-repo
      # This block executes code analysis tests with pylint.
      prologue:
        commands:
          # Correct permissions since they are too open by default:
          - chmod 0600 ~/.ssh/id_rsa_semaphoreci
          # Add the key to the ssh agent:
          - ssh-add ~/.ssh/id_rsa_semaphoreci
          - git clone git@github.com:Humorloos/GoogleApiHelper.git
          - git clone git@github.com:Humorloos/googleCalendarApp.git
          - checkout
          # At this point, the cache contains the downloaded packages ...
          - cache restore
          - sem-version python 3.9
          # ... so pip does the installation much faster.
          - pip install -r requirements.txt --cache-dir .pip_cache
          # setuptools >= 58.0.0 currently (2021-11-14) don't work with gdal, so we need to downgrade to 57.5.0
          - pip install setuptools==57.5.0
          # install GDAL from ubuntugis/ppa
          # echo -ne '\n' | for automatically accepting with [ENTER]
          - echo -ne '\n' | sudo add-apt-repository ppa:ubuntugis/ppa
          - sudo apt-get update
          # -y for automatically answering with y
          - sudo apt-get install -y libgdal-dev gdal-bin
          - export CPLUS_INCLUDE_PATH=/usr/include/gdal
          - export C_INCLUDE_PATH=/usr/include/gdal
          # install gdal from local sources
          - pip3 install --global-option=build_ext --global-option="-I /usr/include/gdal" GDAL==`gdal-config --version`
      jobs:
        - name: Pylint
          commands:
            - pylint python_anywhere --load-plugins=pylint_django
  - name: "Run Tests"
    dependencies: ["Install Dependencies"]
    task:
      secrets:
        - name: private-repo
      # This block executes code analysis tests with pylint.
      prologue:
        commands:
          # Install private repository dependencies
          # Correct permissions since they are too open by default:
          - chmod 0600 ~/.ssh/id_rsa_semaphoreci
          # Add the key to the ssh agent:
          - ssh-add ~/.ssh/id_rsa_semaphoreci
          # clone repos
          - git clone git@github.com:Humorloos/GoogleApiHelper.git
          - git clone git@github.com:Humorloos/googleCalendarApp.git
          - checkout
          # At this point, the cache contains the downloaded packages ...
          - cache restore
          - sem-version python 3.9
          # ... so pip does the installation much faster.
          - pip install -r requirements.txt --cache-dir .pip_cache
          # setuptools >= 58.0.0 currently (2021-11-14) don't work with gdal, so we need to downgrade to 57.5.0
          - pip install setuptools==57.5.0
          # install GDAL from ubuntugis/ppa
          # echo -ne '\n' | for automatically accepting with [ENTER]
          - echo -ne '\n' | sudo add-apt-repository ppa:ubuntugis/ppa
          - sudo apt-get update
          # -y for automatically answering with y
          - sudo apt-get install -y libgdal-dev gdal-bin
          - export CPLUS_INCLUDE_PATH=/usr/include/gdal
          - export C_INCLUDE_PATH=/usr/include/gdal
          # install gdal from local sources
          - pip3 install --global-option=build_ext --global-option="-I /usr/include/gdal" GDAL==`gdal-config --version`
          # install spatialite
          - cd ..
          - wget https://www.gaia-gis.it/gaia-sins/libspatialite-sources/libspatialite-4.3.0.tar.gz
          - tar xaf libspatialite-4.3.0.tar.gz
          - cd libspatialite-4.3.0
          - ./configure
          - make
          - sudo make install
          - cache store
          - checkout
      jobs:
        - name: Integration tests
          commands:
            - python manage.py test bouldern
promotions:
  - name: Deploy
    pipeline_file: deploy.yml